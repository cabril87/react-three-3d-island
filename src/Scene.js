/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: ConradJustin (https://sketchfab.com/ConradJustin)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/peachy-balloon-gift-3c8b73ebbb3748d39994fc87bc945474
title: Peachy Balloon (gift)
*/

import React, { useEffect, useLayoutEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import * as THREE from 'three'
import { useSphere} from "@react-three/cannon"
import usePlayerControls from './Player'


const SPEED = 5
const direction = new THREE.Vector3()
const frontVector = new THREE.Vector3()


const sideVector = new THREE.Vector3()

const rotation = new THREE.Vector3()
const speed = new THREE.Vector3()

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/scene.gltf')
  const [ref, api] = useSphere(() => ({ mass: 0, type: "Dynamic", position: [0, 0, 0], ...props }))
  const { actions } = useAnimations(animations, ref)
  const { forward, backward, left, right, jump } = usePlayerControls()
  const { scene} = useThree()
  
  const velocity = useRef([0, 0, 0])
  useEffect(() => api.velocity.subscribe((v) => (velocity.current = v)), [])

  useEffect(() => {
    actions.Scene.play()
  }, [])

  useFrame(({clock}) => {
    
    // api.position.set(0, 0, 0)
    sideVector.set(Number(left)  - Number(right), 0, 0)
    frontVector.set(0, 0, Number(backward) - Number(forward) )
    
    direction.subVectors(frontVector, sideVector).normalize().multiplyScalar(SPEED).applyEuler(scene.rotation)
    // direction.applyAxisAngle(sideVector, frontVector)
    speed.fromArray(velocity.current)
    
    ref.current.rotation.copy(scene.rotation)
    ref.current.position.copy(scene.position).add(scene.getWorldDirection(rotation).multiplyScalar(1))
    api.velocity.set(direction.x, velocity.current[1], direction.z)
  })

  return (
    <>
    
    <mesh ref={group} />
    <group ref={ref} {...props} dispose={null} >
      <group position={[0,2,0]} rotation={[1.57, 0, -Math.PI / 2]} scale={[1, 1, 1]}>
        <group rotation={[-Math.PI, 0, -Math.PI /2]}>
          <group position={[0, 0,0 ]} rotation={[0, 0, -Math.PI / 2]} scale={0.2}>
            <primitive object={nodes._rootJoint} />
            <skinnedMesh
              geometry={nodes.Object_9.geometry}
              material={materials.airship}
              skeleton={nodes.Object_9.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_10.geometry}
              material={nodes.Object_10.material}
              skeleton={nodes.Object_10.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_11.geometry}
              material={nodes.Object_11.material}
              skeleton={nodes.Object_11.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
    </>
  )
}

useGLTF.preload('/scene.gltf')
